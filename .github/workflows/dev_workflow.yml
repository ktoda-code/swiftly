name: ci-dev

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  prepare-environment:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'oracle'
          cache: 'maven'

      - name: Generate Cache Key
        id: cache-key
        run: echo "name=key::$(echo ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}-dev)" >> $GITHUB_OUTPUT

      - name: Create .env File
        run: |
          echo "# Database configuration" >> application-variables-dev.env
          echo "DB_HOST=${{ secrets.DB_HOST_DEV }}" >> application-variables-dev.env
          echo "DB_NAME=${{ secrets.DB_NAME_DEV }}" >> application-variables-dev.env
          echo "DB_USER=${{ secrets.DB_USER_DEV }}" >> application-variables-dev.env
          echo "DB_PASSWORD=${{ secrets.DB_PASS_DEV }}" >> application-variables-dev.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB_DEV }}" >> application-variables-dev.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER_DEV }}" >> application-variables-dev.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASS_DEV }}" >> application-variables-dev.env
          echo "# Spring configuration" >> application-variables-dev.env
          echo "SPRING_PROFILES_ACTIVE=dev" >> application-variables-dev.env
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DS_URL }}" >> application-variables-dev.env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DS_USER_URL }}" >> application-variables-dev.env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DS_PASS_URL }}" >> application-variables-dev.env

  build-cache-dependencies:
    runs-on: ubuntu-latest
    needs: prepare-environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Maven Packages
        uses: actions/cache@v3.3.2
        with:
          path: ~/.m2
          key: ${{ needs.prepare-environment.cache-key.outputs.name }}
          restore-keys: ${{ runner.os }}-m2-dev

  build-push-test-image:
    runs-on: ubuntu-latest
    needs: build-cache-dependencies
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Test Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          target: test
          tags: ktodacode/swiftly:test

      - name: Removing Prune Images
        run: docker image prune -f

      - name: Logout from Docker Hub
        run: docker logout

  build-push-dev-image:
    runs-on: ubuntu-latest
    needs: build-cache-dependencies
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Dev Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: Dockerfile
          target: development
          tags: ktodacode/swiftly:dev
          cache-from: type=registry,ref=ktodacode/swiftly:dev
          cache-to: type=inline

      - name: Removing Prune Images
        run: docker image prune -f

      - name: Logout from Docker Hub
        run: docker logout

  run-tests:
    runs-on: ubuntu-latest
    needs: build-push-test-image
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run the Maven Verify Phase
        run: mvn --batch-mode --update-snapshots verify

  cleanup:
    runs-on: ubuntu-latest
    needs: [ build-push-test-image, build-push-dev-image, run-tests ]
    if: always()
    steps:
      - name: Delete env File
        run: rm application-variables-dev.env
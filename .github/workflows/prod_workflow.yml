name: ci-prod

on:
  pull_request:
    branches: [ main ]

jobs:
  prepare-environment:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'oracle'
          cache: 'maven'

      - name: Generate Cache Key
        id: cache-key
        run: |
          echo "key=${{ runner.os }}-m2-$(echo ${{ hashFiles('**/pom.xml') }})-prod" >> $GITHUB_OUTPUT
          
      - name: Create .env File
        run: |
          echo "# Database configuration" >> application-variables-prod.env
          echo "DB_HOST=${{ secrets.DB_HOST_PROD }}" >> application-variables-prod.env
          echo "DB_NAME=${{ secrets.DB_NAME_PROD }}" >> application-variables-prod.env
          echo "DB_USER=${{ secrets.DB_USER_PROD }}" >> application-variables-prod.env
          echo "DB_PASSWORD=${{ secrets.DB_PASS_PROD }}" >> application-variables-prod.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB_PROD }}" >> application-variables-prod.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER_PROD }}" >> application-variables-prod.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASS_PROD }}" >> application-variables-prod.env
          echo "# Spring configuration" >> application-variables-prod.env
          echo "SPRING_PROFILES_ACTIVE=prod" >> application-variables-prod.env
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DS_URL_PROD }}" >> application-variables-prod.env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DS_USER_URL_PROD }}" >> application-variables-prod.env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DS_PASS_URL_PROD }}" >> application-variables-prod.env

  build-cache-dependencies:
    runs-on: ubuntu-latest
    needs: prepare-environment
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v3.3.2
        with:
          path: ~/.m2
          key: ${{ needs.prepare-environment.outputs.cache-key }}
          restore-keys: ${{ runner.os }}-m2-prod

  build-push-test-image:
    runs-on: ubuntu-latest
    needs: build-cache-dependencies
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - uses: docker/setup-buildx-action@v3

      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: ./Dockerfile
          target: test
          tags: ktodacode/swiftly:latest-test

      - run: docker image prune -f

      - run: docker logout

  build-push-prod-image:
    runs-on: ubuntu-latest
    needs: build-cache-dependencies
    steps:
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - uses: docker/setup-buildx-action@v3

      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          file: ./Dockerfile
          target: production
          tags: ktodacode/swiftly:latest
          cache-from: type=registry,ref=ktodacode/swiftly:latest
          cache-to: type=inline

      - run: docker image prune -f

      - run: docker logout

  run-tests:
    runs-on: ubuntu-latest
    needs: build-push-test-image
    steps:
      - uses: actions/checkout@v4

      - run: mvn --batch-mode --update-snapshots verify

  cleanup:
    runs-on: ubuntu-latest
    needs: [ build-push-test-image, build-push-prod-image, run-tests ]
    if: always()
    steps:
      - run: rm application-variables-prod.env
